When would you want to create a remote repository rather than keeping all your work local?

    When you are working across devices it makes sense to create a remote repository.
    This could be because you personally work on different computers.
    Likewise of course if you want to work with other people it makes sense that you'd want
     them to be able to access the repository from their own devices.
    Another scenario is if you are the sole creator of a project and only work on one device,
     but want to share the project with others online. For instance if you've made a mod or
     an API or something amongst those lines.
    Finally it can be a way to back-up your files remotely, to protect you for when your local
     device is destroyed or stolen etc.

Why might you want to always pull changes manually rather than having Git automatically stay up-
 to-date with your remote repository?
 
	You might be working on the project and therefore not want to automatically have other people's
	 changes applied to your in-progress code. This might introduce unwanted additions and
	 subtractions or result in merge conflicts you do not want.
	You might start from the master branch but intent to commit your work to a new branch.
	Therefore it wouldn't neccesarily be desireable to merge with an update to the master branch
	 someone else has worked on.
	 
Describe the differences between forks, clones, and branches. When would you use one instead of 
 another?
 
	Branches are a way to split of a lineair commit tree. Having multiple branches in a repository
	 gives you the opportunity to work on multiple aspects of a program without them interacting
	 with each other. By doing this you could for instance have multiple people each working on
	 an individual feature or bug. Only once they are fully completed they can be attempted to be
	 merged back onto the master branch.
	A clone is a full copy of a repository. After the clone there is nothing that connects either
	 repository to each other. You'd have to manually add changes made to one repository to the
	 other.
	A fork on the other hand creates more of a 'living' clone of a specific repository.
	Changes made to the original repository will be reflected in the fork repository.
	Changes made in the fork however aren't automatically added to the original repository.
	These can however be added in the way of a push request.
	This gives other users the option to alter the original code, but still gives the original
	 owner the power on whether or not to include any of those made changes.
	 
What is the benefit of having a copy of the last known state of the remote stored locally?

	By having a local copy of the remote changes you can compare your own changes to any remote
	 changes that you haven't merged into your local branch yet.
	This way you have the ability to work on your branch, then resolve any merging conflicts
	 with the remote branch locally and also offline before trying to push them back to the
	 remote repository.
	 
How would you collaborate without using Git or GitHub? What would be easier, and what would
 be harder?
 
	A simple way to collaborate without using Git would be to use something like Dropbox instead.
	You wouldn't really have to deal with or worry about things like commit and merge conflicts.
	However on the flip side it would be very difficult for multiple people to work on the same
	 file at once without running into trouble.
	 
When would you want to make changes in a separate branch rather than directly in master? What
 benefits does each approach have?
 
	The benefit of working on a separate branch is that it gives you more control. This way you
	 can develop a feature, push it to the remote and then have someone take some time to make sure
	 a merge into master wouldn't result in any unexpected problems.
	For instance if multiple people are all adding in their own features, it can quickly result
	 into chaos if they all try to merge their work into master at the same time.
	By having them all push their changes on a different branch you can merge them back into
	 master one at a time and remain control over all the changes.
	The downside of course is that this all takes some extra time and management to do.
	If you are working on a smaller scale with less peoeple simultaniously altering the same code,
	 it might be easier just to push directly to master and deal with the incidental merge conflict
	 when it happens to arrive.